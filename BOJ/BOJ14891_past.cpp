////1년전 코드
//#include<iostream>
//#include<vector>
//#include<string>
//
//using namespace std;
//
//vector <int> gear[4]; ////톱니바퀴 저장
//pair <int, int> rotation[100]; //first : 회전할 톱니바퀴 second : 회전 방향
//int dir_0, dir_1, dir_2, dir_3;
//
////톱니바퀴 반시계 방향 회전
//int op_clock(int n) {
//	int temp = gear[n].at(0);
//	for (int i = 0; i < 7; i++) {
//		gear[n].at(i) = gear[n].at(i + 1);
//	}
//	gear[n].at(7) = temp;
//
//	return 0;
//}
//
////톱니바퀴 시계 방향 회전
//int clock(int m) {
//	int temp = gear[m].at(7);
//	for (int i = 7; i > 0; i--) {
//		gear[m].at(i) = gear[m].at(i - 1);
//	}
//	gear[m].at(0) = temp;
//
//	return 0;
//}
//
//int move() {
//	//1번 톱니바퀴의 회전방향이 시계방향이라면
//	if (dir_0 == 1) {
//		clock(0);
//	}
//	//1번 톱니바퀴의 회전방향이 반시계방향이라면
//	else if (dir_0 == -1) {
//		op_clock(0);
//	}
//
//	//2번 톱니바퀴의 회전방향이 시계방향이라면
//	if (dir_1 == 1) {
//		clock(1);
//	}
//	//2번 톱니바퀴의 회전방향이 반시계방향이라면
//	else if (dir_1 == -1) {
//		op_clock(1);
//	}
//
//	//3번 톱니바퀴의 회전방향이 시계방향이라면
//	if (dir_2 == 1) {
//		clock(2);
//	}
//	//3번 톱니바퀴의 회전방향이 반시계방향이라면
//	else if (dir_2 == -1) {
//		op_clock(2);
//	}
//
//	//4번 톱니바퀴의 회전방향이 시계방향이라면
//	if (dir_3 == 1) {
//		clock(3);
//	}
//	//4번 톱니바퀴의 회전방향이 반시계방향이라면
//	else if (dir_3 == -1) {
//		op_clock(3);
//	}
//
//	return 0;
//}
//
//int solve(int num, int dir) {
//	int n = num - 1;
//
//	switch (n) {
//	//1번 톱니바퀴라면
//	case 0:
//	{
//		dir_0 = dir; //1번 톱니바퀴의 회전방향은 입력받은 회전방향
//		//2번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[0].at(2) == gear[1].at(6)) {
//			dir_1 = 0; //2번 톱니바퀴 회전 x
//			dir_2 = 0; //3번 톱니바퀴 회전 x
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//			break;
//		}
//		//2번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//1번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_0 == 1) {
//				dir_1 = -1; //2번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//1번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_1 = 1; //2번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//2번 톱니바퀴와 3번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[1].at(2) == gear[2].at(6)) {
//			dir_2 = 0; //3번 톱니바퀴 회전 x
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//			break;
//		}
//		//2번 톱니바퀴와 3번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//2번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_1 == 1) {
//				dir_2 = -1; //3번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//2번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_2 = 1; //3번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//3번 톱니바퀴와 4번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[2].at(2) == gear[3].at(6)) {
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//		}
//		//3번 톱니바퀴와 4번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//3번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_2 == 1) {
//				dir_3 = -1; //4번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//3번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_3 = 1; //4번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		break;
//	}
//	//2번 톱니바퀴라면
//	case 1:
//	{
//		dir_1 = dir; //2번 톱니바퀴의 회전방향은 입력받은 회전방향
//		//1번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[1].at(6) == gear[0].at(2)) {
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//		}
//		//1번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//2번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_1 == 1) {
//				dir_0 = -1; //1번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//2번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_0 = 1; //1번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//3번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[1].at(2) == gear[2].at(6)) {
//			dir_2 = 0; //3번 톱니바퀴 회전 x
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//			break;
//		}
//		//3번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//2번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_1 == 1) {
//				dir_2 = -1; //3번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//2번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_2 = 1; //3번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//3번 톱니바퀴와 4번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[2].at(2) == gear[3].at(6)) {
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//		}
//		//3번 톱니바퀴와 4번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//3번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_2 == 1) {
//				dir_3 = -1; //4번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//3번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_3 = 1; //4번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		break;
//	}
//	//3번 톱니바퀴라면
//	case 2:
//	{
//		dir_2 = dir; //3번 톱니바퀴의 회전방향은 입력받은 회전방향
//		//4번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[2].at(2) == gear[3].at(6)) {
//			dir_3 = 0; //4번 톱니바퀴 회전 x
//		}
//		//4번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//3번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_2 == 1) {
//				dir_3 = -1; //4번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//3번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_3 = 1; //4번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//2번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[2].at(6) == gear[1].at(2)) {
//			dir_1 = 0; //2번 톱니바퀴 회전 x
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//			break;
//		}
//		//2번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//3번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_2 == 1) {
//				dir_1 = -1; //2번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//3번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_1 = 1; //2번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//1번 톱니바퀴와 2번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[1].at(6) == gear[0].at(2)) {
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//		}
//		//1번 톱니바퀴와 2번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//2번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_1 == 1) {
//				dir_0 = -1; //1번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//2번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_0 = 1; //1번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		break;
//	}
//	//4번 톱니바퀴라면
//	case 3:
//	{
//		dir_3 = dir; //4번 톱니바퀴의 회전방향은 입력받은 회전방향
//		//3번 톱니바퀴와 맞물리는 극의 값이 같다면
//		if (gear[3].at(6) == gear[2].at(2)) {
//			dir_2 = 0; //3번 톱니바퀴 회전 x
//			dir_1 = 0; //2번 톱니바퀴 회전 x
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//			break;
//		}
//		//3번 톱니바퀴와 맞물리는 극의 값이 다르다면
//		else {
//			//4번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_3 == 1) {
//				dir_2 = -1; //3번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//4번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_2 = 1; //3번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//2번 톱니바퀴와 3번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[2].at(6) == gear[1].at(2)) {
//			dir_1 = 0; //2번 톱니바퀴 회전 x
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//			break;
//		}
//		//2번 톱니바퀴와 3번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//3번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_2 == 1) {
//				dir_1 = -1; //2번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//3번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_1 = 1; //2번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		//1번 톱니바퀴와 2번 톱니바퀴의 맞물리는 극의 값이 같다면
//		if (gear[1].at(6) == gear[0].at(2)) {
//			dir_0 = 0; //1번 톱니바퀴 회전 x
//		}
//		//1번 톱니바퀴와 2번 톱니바퀴의 맞물리는 극의 값이 다르다면
//		else {
//			//2번 톱니바퀴의 회전방향이 시계방향이라면
//			if (dir_1 == 1) {
//				dir_0 = -1; //1번 톱니바퀴의 회전방향은 반시계 방향
//			}
//			//2번 톱니바퀴의 회전방향이 반시계방향이라면
//			else {
//				dir_0 = 1; //1번 톱니바퀴의 회전방향은 시계 방향
//			}
//		}
//		break;
//	}
//	}
//	move();
//
//	return 0;
//}
//
//int main() {
//	ios_base::sync_with_stdio(false);
//	cin.tie(0);
//	cout.tie(0);
//
//	int K, sum = 0;
//
//	for (int i = 0; i < 4; i++) {
//		string s;
//		cin >> s;
//		for (int j = 0; j < s.length(); j++) {
//			int temp = s[j] - '0';
//			gear[i].push_back(temp);
//		}
//	}
//
//	cin >> K; //회전 횟수
//
//	for (int i = 0; i < K; i++) {
//		cin >> rotation[i].first >> rotation[i].second;
//		solve(rotation[i].first, rotation[i].second);
//	}
//
//	//각 톱니바퀴의 12시 방향 극 확인 후 점수 합산
//	if (gear[0].at(0) == 1) {
//		sum = sum + 1;
//	}
//	if (gear[1].at(0) == 1) {
//		sum = sum + 2;
//	}
//	if (gear[2].at(0) == 1) {
//		sum = sum + 4;
//	}
//	if (gear[3].at(0) == 1) {
//		sum = sum + 8;
//	}
//
//	printf("%d\n", sum);
//
//	return 0;
//}