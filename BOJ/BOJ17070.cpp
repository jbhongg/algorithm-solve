//#include<iostream>
//
//using namespace std;
//
//int map[16][16];
//int N, cnt;
//
//void solve(int c, int r, int dir) {
//	//파이프의 행과 열이 마지막 칸에 도착하면 종료
//	if (c == N-1 && r == N-1) {
//		cnt++;
//		return;
//	}
//	//가로 방향이면
//	if (dir == 0) {
//		//가로방향으로 진행할수 있으면 
//		if (r + 1 >= 0 && r + 1 < N && map[c][r+1] == 0) {
//			solve(c, r+1, 0); //가로 방향으로 한칸 진행
//		}
//		//대각선 방향으로 진행할 수 있으면
//		if (c + 1 >= 0 && c + 1 < N && r + 1 >= 0 && r + 1 < N && map[c][r + 1] == 0 && map[c + 1][r] == 0 && map[c + 1][r + 1] == 0) {
//			solve(c + 1, r + 1, 1); //대각선 방향으로 한칸 진행
//		}
//	}
//	//대각선 방향이면
//	else if (dir == 1) {
//		//가로방향으로 진행할수 있으면
//		if (r + 1 >= 0 && r + 1 < N && map[c][r + 1] == 0) {
//			solve(c, r + 1, 0); //가로 방향으로 한칸 진행
//		}
//		//대각선 방향으로 진행할 수 있으면
//		if (c + 1 >= 0 && c + 1 < N && r + 1 >= 0 && r + 1 < N && map[c][r + 1] == 0 && map[c + 1][r] == 0 && map[c + 1][r + 1] == 0) {
//			solve(c + 1, r + 1, 1); //대각선 방향으로 한칸 진행
//		}
//		//세로 방향으로 진행할수 있으면
//		if (c + 1 >= 0 && c + 1 < N && map[c + 1][r] == 0) {
//			solve(c + 1, r, 2); //세로 방향으로 한칸 진행
//		}
//	}
//	//세로 방향이면
//	else if (dir == 2) {
//		//대각선 방향으로 진행할 수 있으면
//		if (c + 1 >= 0 && c + 1 < N && r + 1 >= 0 && r + 1 < N && map[c][r + 1] == 0 && map[c + 1][r] == 0 && map[c + 1][r + 1] == 0) {
//			solve(c + 1, r + 1, 1); //대각선 방향으로 한칸 진행
//		}
//		//세로 방향으로 진행할수 있으면
//		if (c + 1 >= 0 && c + 1 < N && map[c + 1][r] == 0) {
//			solve(c + 1, r, 2); //세로 방향으로 한칸 진행
//		}
//	}
//}
//
//int main() {
//	ios_base::sync_with_stdio(false);
//	cin.tie(0);
//	cout.tie(0);
//
//	cin >> N;
//	for (int i = 0; i < N; i++) {
//		for (int j = 0; j < N; j++) {
//			cin >> map[i][j];
//		}
//	}
//	
//	solve(0,1,0); //파이프의 끝이 도착하면 되므로 시작은 0,1부터 그리고 방향은 가로방향으로 시작
//
//	cout << cnt << "\n";
//	
//	return 0;
//}